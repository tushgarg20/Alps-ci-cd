#Unit	GSIM residency			Comments
#Instance Counts
	FPS	=        D(knob.CrClock.multiplier)*1000000/CrClocks      # Dummy value as FPS is irrelevant in analytical model 	
	numEUs	=	 D(knob.numEUs) 	#This includes Slices & SubSlices
	numFGs = D(knob.numFGs)				
	CrClocks	=	D(MAX_CYCLES)	
	num_EU_FPU0	=	numEUs	
	num_EU_FPU1	=	numEUs	
	num_EU_FPU2	=	numEUs	
	num_EU_EM	=	numEUs	
	num_EU_GA	=	numEUs
	num_EU_TC	=	numFGs	
	num_EU_GRF	=	numEUs	
	num_EU_DFX	=	numEUs	
	num_EU_SMALL	=	numEUs	
	num_EU_CPunit	=	numEUs	
	num_EU_Assign	=	numEUs	
	num_EU_Repeater	=	numEUs	
	num_EU_CLKGLUE	=	numEUs	
	num_EU_NONCLKGLUE	=	numEUs	
	num_EU_DOP	=	numEUs	
	num_EU_TCGA	=	numEUs	
	num_EU_Pipelines	=	numEUs	
	num_EU_Accumulator	=	numEUs			
	num_EU_ExtraPipe = numEUs
        num_EU_INFRA     = numEUs
# Generic definitions
        @FPU@ = FPU
        @ALLINST@ = (mad|mul|mov|mac|sel|add)
        @3Src_INST@ = (mad|mac)
        @2Src_INST@ = (mul|add|sel|mov)
        @ALLDTYPE@ = (16|32|64)
        @TYPE@ = (fp|int)
        @SYS@ = (SYS|SYSW)
        @SYS_TYPE@ = (INT|FLOAT|BF8|HF8)
	#FPU_total_count = D(SUM('FPU0_@ALLINST@_fp@ALLDTYPE@'))
	FPU_total_count = D(SUM('FPU_@ALLINST@_fp@ALLDTYPE@'))
	FPU2_total_count = D(SUM('FPU2_@ALLINST@_fp@ALLDTYPE@'))
        #INT_total_count = D(SUM('FPU1_@ALLINST@_@TYPE@@ALLDTYPE@'))		
        INT_total_count = D(SUM('FPU_@ALLINST@_int@ALLDTYPE@'))		
        DPAS_total_count = D(SUM('SYS_@SYS_TYPE@'))
        FPU3Src_total_count = D(SUM('@FPU@_@3Src_INST@_@TYPE@@ALLDTYPE@'))		
        FPU2Src_total_count = D(SUM('@FPU@_@2Src_INST@_@TYPE@@ALLDTYPE@'))		
#FPU and DPAS opcodes
        FPU0_toggle_rate = D(SYS_TOGGLE_RATE) 
        FPU2_toggle_rate = D(SYS_TOGGLE_RATE) 
        FPU1_toggle_rate = D(SYS_TOGGLE_RATE) 
        DPAS_toggle_rate = D(SYS_TOGGLE_RATE) 
        GA_toggle_rate = MAX(FPU0_toggle_rate, FPU1_toggle_rate)
        ECC_Flag = D(knob.Ecc) 
        DPAS_Bypass_percent = D(SYS_BYPASS)
        Sign_Flag = D(knob.DPAS_SignedOp) 
        BF_Flag  = D(knob.DPAS_BF16)
        Bypass_factor = 1 - 0.42*DPAS_Bypass_percent
        DPAS_Depth = D(knob.DPAS_Depth)
        FPU0_mad_fp32 = (FPU_total_count > 0) ? (D(SUM('FPU_mad_fp32')) / (FPU_total_count)) : 0
        FPU0_mul_fp32 = (FPU_total_count > 0) ? (D(SUM('FPU_mul_fp32')) / (FPU_total_count)) : 0
        FPU0_add_fp32 = (FPU_total_count > 0) ? (D(SUM('FPU_add_fp32')) / (FPU_total_count)) : 0 
        FPU0_sel_fp32 = (FPU_total_count > 0) ? (D(SUM('FPU_sel_fp32')) / (FPU_total_count)) : 0 
        FPU0_mac_fp32 = (FPU_total_count > 0) ? (D(SUM('FPU_mac_fp32')) / (FPU_total_count)) : 0 
        FPU0_mov_fp32 = (FPU_total_count > 0) ? (D(SUM('FPU_mov_fp32')) / (FPU_total_count)) : 0 
        FPU0_mad_fp16 = (FPU_total_count > 0) ? (D(SUM('FPU_mad_fp16')) / (FPU_total_count)) : 0 
        FPU0_mul_fp16 = (FPU_total_count > 0) ? (D(SUM('FPU_mul_fp16')) / (FPU_total_count)) : 0 
        FPU0_add_fp16 = (FPU_total_count > 0) ? (D(SUM('FPU_add_fp16')) / (FPU_total_count)) : 0 
        FPU0_sel_fp16 = (FPU_total_count > 0) ? (D(SUM('FPU_sel_fp16')) / (FPU_total_count)) : 0 
        FPU0_mac_fp16 = (FPU_total_count > 0) ? (D(SUM('FPU_mac_fp16')) / (FPU_total_count)) : 0 
        FPU0_mov_fp16 = (FPU_total_count > 0) ? (D(SUM('FPU_mov_fp16')) / (FPU_total_count)) : 0 
        FPU1_mad_sint32 = (INT_total_count > 0) ? (D(SUM('FPU_mad_int32')) / (INT_total_count)) : 0 
        FPU1_mac_sint32 = (INT_total_count > 0) ? (D(SUM('FPU_mac_int32')) / (INT_total_count)) : 0 
        FPU1_mul_sint32 = (INT_total_count > 0) ? (D(SUM('FPU_mul_int32')) / (INT_total_count)) : 0 
        FPU1_add_sint32 = (INT_total_count > 0) ? (D(SUM('FPU_add_int32')) / (INT_total_count)) : 0 
        FPU1_sel_sint32 = (INT_total_count > 0) ? (D(SUM('FPU_sel_int32')) / (INT_total_count)) : 0 
        FPU1_mov_sint32 = (INT_total_count > 0) ? (D(SUM('FPU_mov_int32')) / (INT_total_count)) : 0 
        FPU1_mad_sint16 = (INT_total_count > 0) ? (D(SUM('FPU_mad_int16')) / (INT_total_count)) : 0 
        FPU1_mul_sint16 = (INT_total_count > 0) ? (D(SUM('FPU_mul_int16')) / (INT_total_count)) : 0 
        FPU1_add_sint16 = (INT_total_count > 0) ? (D(SUM('FPU_add_int16')) / (INT_total_count)) : 0 
        FPU1_sel_sint16 = (INT_total_count > 0) ? (D(SUM('FPU_sel_int16')) / (INT_total_count)) : 0 
        FPU1_mac_sint16 = (INT_total_count > 0) ? (D(SUM('FPU_mac_int16')) / (INT_total_count)) : 0
        FPU1_mad_fp16 = (INT_total_count > 0) ? (D(SUM('FPU1_mad_fp16')) / (INT_total_count)) : 0 
        FPU1_mul_fp16 = (INT_total_count > 0) ? (D(SUM('FPU1_mul_fp16')) / (INT_total_count)) : 0 
        FPU1_add_fp16 = (INT_total_count > 0) ? (D(SUM('FPU1_add_fp16')) / (INT_total_count)) : 0 
        FPU1_sel_fp16 = (INT_total_count > 0) ? (D(SUM('FPU1_sel_fp16')) / (INT_total_count)) : 0 
        FPU1_mac_fp16 = (INT_total_count > 0) ? (D(SUM('FPU1_mac_fp16')) / (INT_total_count)) : 0 
        FPU0_mad_fp64 = (FPU_total_count > 0) ? (D(SUM('FPU_mad_fp64')) / (FPU_total_count)) : 0
        FPU0_mul_fp64 = (FPU_total_count > 0) ? (D(SUM('FPU_mul_fp64')) / (FPU_total_count)) : 0
        FPU0_add_fp64 = (FPU_total_count > 0) ? (D(SUM('FPU_add_fp64')) / (FPU_total_count)) : 0 
        FPU0_sel_fp64 = (FPU_total_count > 0) ? (D(SUM('FPU_sel_fp64')) / (FPU_total_count)) : 0 
        FPU0_mac_fp64 = (FPU_total_count > 0) ? (D(SUM('FPU_mac_fp64')) / (FPU_total_count)) : 0 
        FPU0_mov_fp64 = (FPU_total_count > 0) ? (D(SUM('FPU_mov_fp64')) / (FPU_total_count)) : 0 
        # Bypass power states
        FPU0_mad_floatbypass = (FPU_total_count > 0) ? (D(SUM('FPU_mad_fpbypass')) / (FPU_total_count)) : 0 
        FPU0_mac_floatbypass = (FPU_total_count > 0) ? (D(SUM('FPU_mac_fpbypass')) / (FPU_total_count)) : 0 
        FPU0_mul_floatbypass = (FPU_total_count > 0) ? (D(SUM('FPU_mul_fpbypass')) / (FPU_total_count)) : 0 
        FPU0_add_floatbypass = (FPU_total_count > 0) ? (D(SUM('FPU_add_fpbypass')) / (FPU_total_count)) : 0 
        FPU0_sel_floatbypass = (FPU_total_count > 0) ? (D(SUM('FPU_sel_fpbypass')) / (FPU_total_count)) : 0 
        #FPU2 - 2xSP and 2xDP pipes
        FPU2_mad_fp32 = (FPU2_total_count > 0) ? (D(SUM('FPU2_mad_fp32')) / (FPU_total_count)) : 0
        FPU2_mad_fp64 = (FPU2_total_count > 0) ? (D(SUM('FPU2_mad_fp64')) / (FPU_total_count)) : 0
      
        PS2_GRF_SEND_PATH = D(send)/CrClocks 
        PS2_EU_FPU0   = D(FPU0_UTILIZATION)
        PS2_EU_FPU2   = D(FPU2_UTILIZATION)
        PS2_EU_FPU1   = INT_total_count/CrClocks
        EM_transc_fp32 = D(EM_math)/CrClocks
#GRF, ACC, TC and GA related
        #PS2_GA_FPU3Src_SinglePipe =  ((FPU_total_count + INT_total_count) > 0) ? (FPU3Src_total_count / (FPU_total_count + INT_total_count)) * D(GA_FPU) : 0 
        #PS2_GA_FPU2Src_SinglePipe = ((FPU_total_count + INT_total_count) > 0) ? (FPU2Src_total_count / (FPU_total_count + INT_total_count)) * D(GA_FPU) : 0  
        #PS2_GA_ExtraPipe = D(GA_ExtraPipe) 
        PS2_GRF_READ_suppressed = D(GRF_READ_suppressed)/CrClocks
        PS2_GA_GRF_1READ = (ECC_Flag == 0) ? (D(GRF_READ)/CrClocks) - PS2_GRF_READ_suppressed : 0
        PS2_GA_GRF_1WRITE = (ECC_Flag == 0) ? (D(GRF_WRITE)/CrClocks) : 0
        PS2_GA_GRF_1Read_ECC = (ECC_Flag > 0) ? (D(GRF_READ)/CrClocks) - PS2_GRF_READ_suppressed : 0
        PS2_GA_GRF_1Write_ECC = (ECC_Flag > 0) ? (D(GRF_WRITE)/CrClocks) : 0
        PS2_GA_Syn_1Read_ECC =  (D(GRF_READ)/CrClocks)
        PS2_GA_Syn_1Write_ECC = (D(GRF_WRITE)/CrClocks)
        PS2_GA_Syn_Floor = (DPAS_total_count + FPU_total_count/8 + INT_total_count/8 + FPU2_total_count/8)/CrClocks 
        PS2_GA_GRF_FLOOR = (DPAS_total_count + FPU_total_count/8 + INT_total_count/8 + FPU2_total_count/8)/CrClocks 
        PS2_GA_Read_FPU0_dispatch = (FPU_total_count  > 0) ? (FPU_total_count / (FPU_total_count +  FPU2_total_count + INT_total_count)) * D(GA_FPU) : 0 
        PS2_GA_Read_FPU1_dispatch = (INT_total_count  > 0) ? (INT_total_count / (FPU_total_count +  FPU2_total_count + INT_total_count)) * D(GA_FPU) : 0 
        PS2_GA_Read_DPAS_dispatch = D(GA_ExtraPipe)
        PS2_TC_1Dispatch = D(TC)
        PS2_Accumulator_READ = D(ACCUM_READ)/CrClocks
        PS2_Accumulator_WRITE = D(ACCUM_WRITE)/CrClocks
#INFRA power
        SYST_Active = D(SUM('@SYS@_@SYS_TYPE@'))/CrClocks
        PS2_EU_INFRA = 1 
        PS2_EU_SYST_INFRA = (SYST_Active > 0.1)?1:0
